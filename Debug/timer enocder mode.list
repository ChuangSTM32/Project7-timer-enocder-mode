
timer enocder mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000393c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b0  080048b0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b8  080048b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000614  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000678  20000678  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cf27  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000214e  00000000  00000000  0002cffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db0  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a9e  00000000  00000000  0002ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000244b0  00000000  00000000  0003099e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011c53  00000000  00000000  00054e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da69f  00000000  00000000  00066aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003dc4  00000000  00000000  00141140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00144f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ad4 	.word	0x08003ad4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08003ad4 	.word	0x08003ad4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_GPIO_Init+0x84>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <MX_GPIO_Init+0x84>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_GPIO_Init+0x84>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_GPIO_Init+0x84>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <MX_GPIO_Init+0x84>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_GPIO_Init+0x84>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_GPIO_Init+0x84>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <MX_GPIO_Init+0x84>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_GPIO_Init+0x84>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_GPIO_Init+0x84>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_GPIO_Init+0x84>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_GPIO_Init+0x84>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_I2C1_Init+0x74>)
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <MX_I2C1_Init+0x78>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_I2C1_Init+0x74>)
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <MX_I2C1_Init+0x7c>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_I2C1_Init+0x74>)
 8000632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_I2C1_Init+0x74>)
 8000652:	f001 f87b 	bl	800174c <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f8fc 	bl	8000858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <MX_I2C1_Init+0x74>)
 8000664:	f001 fe3d 	bl	80022e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800066e:	f000 f8f3 	bl	8000858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_I2C1_Init+0x74>)
 8000676:	f001 fe70 	bl	800235a <HAL_I2CEx_ConfigDigitalFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000680:	f000 f8ea 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000080 	.word	0x20000080
 800068c:	40005400 	.word	0x40005400
 8000690:	00061a80 	.word	0x00061a80

08000694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a19      	ldr	r2, [pc, #100]	; (8000718 <HAL_I2C_MspInit+0x84>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d12c      	bne.n	8000710 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_I2C_MspInit+0x88>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_I2C_MspInit+0x88>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_I2C_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d8:	2312      	movs	r3, #18
 80006da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e4:	2304      	movs	r3, #4
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <HAL_I2C_MspInit+0x8c>)
 80006f0:	f000 fe80 	bl	80013f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_I2C_MspInit+0x88>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_I2C_MspInit+0x88>)
 80006fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_I2C_MspInit+0x88>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40005400 	.word	0x40005400
 800071c:	40023800 	.word	0x40023800
 8000720:	40020400 	.word	0x40020400

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f000 fce7 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f829 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f7ff ff2b 	bl	800058c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000736:	f7ff ff6d 	bl	8000614 <MX_I2C1_Init>
  MX_TIM4_Init();
 800073a:	f000 fc19 	bl	8000f70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800073e:	f000 f891 	bl	8000864 <OLED_Init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000742:	213c      	movs	r1, #60	; 0x3c
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <main+0x54>)
 8000746:	f002 fb31 	bl	8002dac <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  number = __HAL_TIM_GET_COUNTER(&htim4);
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <main+0x54>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000750:	b21a      	sxth	r2, r3
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <main+0x58>)
 8000754:	801a      	strh	r2, [r3, #0]
	  OLED_ShowSignedNum_Fill_Zero(0, 0, 5, number, &Font_11x18);
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <main+0x58>)
 8000758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075c:	461a      	mov	r2, r3
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <main+0x5c>)
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4613      	mov	r3, r2
 8000764:	2205      	movs	r2, #5
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f000 faab 	bl	8000cc4 <OLED_ShowSignedNum_Fill_Zero>
	  HAL_Delay(10);
 800076e:	200a      	movs	r0, #10
 8000770:	f000 fd36 	bl	80011e0 <HAL_Delay>
	  number = __HAL_TIM_GET_COUNTER(&htim4);
 8000774:	e7e9      	b.n	800074a <main+0x26>
 8000776:	bf00      	nop
 8000778:	200004e4 	.word	0x200004e4
 800077c:	200000d4 	.word	0x200000d4
 8000780:	20000000 	.word	0x20000000

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fd1a 	bl	80031cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <SystemClock_Config+0xd0>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007f8:	2319      	movs	r3, #25
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007fc:	2390      	movs	r3, #144	; 0x90
 80007fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fde3 	bl	80023d8 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000818:	f000 f81e 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2102      	movs	r1, #2
 8000838:	4618      	mov	r0, r3
 800083a:	f002 f845 	bl	80028c8 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000844:	f000 f808 	bl	8000858 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3750      	adds	r7, #80	; 0x50
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <OLED_Init>:
        }
    }
}


uint8_t OLED_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

	/* Init I2C */
	OLED_I2C_Init();
 800086a:	f000 fa4d 	bl	8000d08 <OLED_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 800086e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000872:	2201      	movs	r2, #1
 8000874:	2178      	movs	r1, #120	; 0x78
 8000876:	485b      	ldr	r0, [pc, #364]	; (80009e4 <OLED_Init+0x180>)
 8000878:	f001 f9aa 	bl	8001bd0 <HAL_I2C_IsDeviceReady>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <OLED_Init+0x22>
		/* Return false */
		return 0;
 8000882:	2300      	movs	r3, #0
 8000884:	e0a9      	b.n	80009da <OLED_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000886:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800088a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800088c:	e002      	b.n	8000894 <OLED_Init+0x30>
		p--;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3b01      	subs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f9      	bne.n	800088e <OLED_Init+0x2a>

	/* Init LCD */
	OLED_WRITECOMMAND(0xAE); //display off
 800089a:	22ae      	movs	r2, #174	; 0xae
 800089c:	2100      	movs	r1, #0
 800089e:	2078      	movs	r0, #120	; 0x78
 80008a0:	f000 faae 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80008a4:	2220      	movs	r2, #32
 80008a6:	2100      	movs	r1, #0
 80008a8:	2078      	movs	r0, #120	; 0x78
 80008aa:	f000 faa9 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008ae:	2210      	movs	r2, #16
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	; 0x78
 80008b4:	f000 faa4 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008b8:	22b0      	movs	r2, #176	; 0xb0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2078      	movs	r0, #120	; 0x78
 80008be:	f000 fa9f 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008c2:	22c8      	movs	r2, #200	; 0xc8
 80008c4:	2100      	movs	r1, #0
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 fa9a 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //---set low column address
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2078      	movs	r0, #120	; 0x78
 80008d2:	f000 fa95 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //---set high column address
 80008d6:	2210      	movs	r2, #16
 80008d8:	2100      	movs	r1, #0
 80008da:	2078      	movs	r0, #120	; 0x78
 80008dc:	f000 fa90 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x40); //--set start line address
 80008e0:	2240      	movs	r2, #64	; 0x40
 80008e2:	2100      	movs	r1, #0
 80008e4:	2078      	movs	r0, #120	; 0x78
 80008e6:	f000 fa8b 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x81); //--set contrast control register
 80008ea:	2281      	movs	r2, #129	; 0x81
 80008ec:	2100      	movs	r1, #0
 80008ee:	2078      	movs	r0, #120	; 0x78
 80008f0:	f000 fa86 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xFF);
 80008f4:	22ff      	movs	r2, #255	; 0xff
 80008f6:	2100      	movs	r1, #0
 80008f8:	2078      	movs	r0, #120	; 0x78
 80008fa:	f000 fa81 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008fe:	22a1      	movs	r2, #161	; 0xa1
 8000900:	2100      	movs	r1, #0
 8000902:	2078      	movs	r0, #120	; 0x78
 8000904:	f000 fa7c 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA6); //--set normal display
 8000908:	22a6      	movs	r2, #166	; 0xa6
 800090a:	2100      	movs	r1, #0
 800090c:	2078      	movs	r0, #120	; 0x78
 800090e:	f000 fa77 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000912:	22a8      	movs	r2, #168	; 0xa8
 8000914:	2100      	movs	r1, #0
 8000916:	2078      	movs	r0, #120	; 0x78
 8000918:	f000 fa72 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x3F); //
 800091c:	223f      	movs	r2, #63	; 0x3f
 800091e:	2100      	movs	r1, #0
 8000920:	2078      	movs	r0, #120	; 0x78
 8000922:	f000 fa6d 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000926:	22a4      	movs	r2, #164	; 0xa4
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	; 0x78
 800092c:	f000 fa68 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD3); //-set display offset
 8000930:	22d3      	movs	r2, #211	; 0xd3
 8000932:	2100      	movs	r1, #0
 8000934:	2078      	movs	r0, #120	; 0x78
 8000936:	f000 fa63 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //-not offset
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	; 0x78
 8000940:	f000 fa5e 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000944:	22d5      	movs	r2, #213	; 0xd5
 8000946:	2100      	movs	r1, #0
 8000948:	2078      	movs	r0, #120	; 0x78
 800094a:	f000 fa59 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xF0); //--set divide ratio
 800094e:	22f0      	movs	r2, #240	; 0xf0
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	; 0x78
 8000954:	f000 fa54 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD9); //--set pre-charge period
 8000958:	22d9      	movs	r2, #217	; 0xd9
 800095a:	2100      	movs	r1, #0
 800095c:	2078      	movs	r0, #120	; 0x78
 800095e:	f000 fa4f 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x22); //
 8000962:	2222      	movs	r2, #34	; 0x22
 8000964:	2100      	movs	r1, #0
 8000966:	2078      	movs	r0, #120	; 0x78
 8000968:	f000 fa4a 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800096c:	22da      	movs	r2, #218	; 0xda
 800096e:	2100      	movs	r1, #0
 8000970:	2078      	movs	r0, #120	; 0x78
 8000972:	f000 fa45 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x12);
 8000976:	2212      	movs	r2, #18
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	; 0x78
 800097c:	f000 fa40 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDB); //--set vcomh
 8000980:	22db      	movs	r2, #219	; 0xdb
 8000982:	2100      	movs	r1, #0
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f000 fa3b 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	; 0x78
 8000990:	f000 fa36 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000994:	228d      	movs	r2, #141	; 0x8d
 8000996:	2100      	movs	r1, #0
 8000998:	2078      	movs	r0, #120	; 0x78
 800099a:	f000 fa31 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x14); //
 800099e:	2214      	movs	r2, #20
 80009a0:	2100      	movs	r1, #0
 80009a2:	2078      	movs	r0, #120	; 0x78
 80009a4:	f000 fa2c 	bl	8000e00 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xAF); //--turn on OLED panel
 80009a8:	22af      	movs	r2, #175	; 0xaf
 80009aa:	2100      	movs	r1, #0
 80009ac:	2078      	movs	r0, #120	; 0x78
 80009ae:	f000 fa27 	bl	8000e00 <OLED_I2C_Write>


	OLED_WRITECOMMAND(OLED_DEACTIVATE_SCROLL);
 80009b2:	222e      	movs	r2, #46	; 0x2e
 80009b4:	2100      	movs	r1, #0
 80009b6:	2078      	movs	r0, #120	; 0x78
 80009b8:	f000 fa22 	bl	8000e00 <OLED_I2C_Write>

	/* Clear screen */
	OLED_Fill(OLED_COLOR_BLACK);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f843 	bl	8000a48 <OLED_Fill>

	/* Update screen */
	OLED_UpdateScreen();
 80009c2:	f000 f813 	bl	80009ec <OLED_UpdateScreen>

	/* Set default values */
	OLED.CurrentX = 0;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <OLED_Init+0x184>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <OLED_Init+0x184>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	OLED.Initialized = 1;
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <OLED_Init+0x184>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000080 	.word	0x20000080
 80009e8:	200004d8 	.word	0x200004d8

080009ec <OLED_UpdateScreen>:

void OLED_UpdateScreen(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e01d      	b.n	8000a34 <OLED_UpdateScreen+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3b50      	subs	r3, #80	; 0x50
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	; 0x78
 8000a04:	f000 f9fc 	bl	8000e00 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x00);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	; 0x78
 8000a0e:	f000 f9f7 	bl	8000e00 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x10);
 8000a12:	2210      	movs	r2, #16
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 f9f2 	bl	8000e00 <OLED_I2C_Write>

		/* Write multi data */
		OLED_I2C_WriteMulti(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_WIDTH * m], OLED_WIDTH);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	01db      	lsls	r3, r3, #7
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <OLED_UpdateScreen+0x58>)
 8000a22:	441a      	add	r2, r3
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	2078      	movs	r0, #120	; 0x78
 8000a2a:	f000 f983 	bl	8000d34 <OLED_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	3301      	adds	r3, #1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	d9de      	bls.n	80009f8 <OLED_UpdateScreen+0xc>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000d8 	.word	0x200000d8

08000a48 <OLED_Fill>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_Fill(OLED_COLOR_t color) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == OLED_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <OLED_Fill+0x14>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e000      	b.n	8000a5e <OLED_Fill+0x16>
 8000a5c:	23ff      	movs	r3, #255	; 0xff
 8000a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a62:	4619      	mov	r1, r3
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <OLED_Fill+0x2c>)
 8000a66:	f002 fbb1 	bl	80031cc <memset>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000d8 	.word	0x200000d8

08000a78 <OLED_DrawPixel>:

void OLED_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
 8000a82:	460b      	mov	r3, r1
 8000a84:	80bb      	strh	r3, [r7, #4]
 8000a86:	4613      	mov	r3, r2
 8000a88:	70fb      	strb	r3, [r7, #3]
	if (
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a8e:	d848      	bhi.n	8000b22 <OLED_DrawPixel+0xaa>
		x >= OLED_WIDTH ||
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	2b3f      	cmp	r3, #63	; 0x3f
 8000a94:	d845      	bhi.n	8000b22 <OLED_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <OLED_DrawPixel+0xb8>)
 8000a98:	791b      	ldrb	r3, [r3, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <OLED_DrawPixel+0x34>
		color = (OLED_COLOR_t)!color;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == OLED_COLOR_WHITE) {
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d11a      	bne.n	8000ae8 <OLED_DrawPixel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	b298      	uxth	r0, r3
 8000aba:	4603      	mov	r3, r0
 8000abc:	01db      	lsls	r3, r3, #7
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <OLED_DrawPixel+0xbc>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	88bb      	ldrh	r3, [r7, #4]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b259      	sxtb	r1, r3
 8000ad8:	88fa      	ldrh	r2, [r7, #6]
 8000ada:	4603      	mov	r3, r0
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <OLED_DrawPixel+0xbc>)
 8000ae4:	54d1      	strb	r1, [r2, r3]
 8000ae6:	e01d      	b.n	8000b24 <OLED_DrawPixel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8000ae8:	88fa      	ldrh	r2, [r7, #6]
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	b298      	uxth	r0, r3
 8000af0:	4603      	mov	r3, r0
 8000af2:	01db      	lsls	r3, r3, #7
 8000af4:	4413      	add	r3, r2
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <OLED_DrawPixel+0xbc>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	b25a      	sxtb	r2, r3
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	2101      	movs	r1, #1
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	b259      	sxtb	r1, r3
 8000b12:	88fa      	ldrh	r2, [r7, #6]
 8000b14:	4603      	mov	r3, r0
 8000b16:	01db      	lsls	r3, r3, #7
 8000b18:	4413      	add	r3, r2
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <OLED_DrawPixel+0xbc>)
 8000b1e:	54d1      	strb	r1, [r2, r3]
 8000b20:	e000      	b.n	8000b24 <OLED_DrawPixel+0xac>
		return;
 8000b22:	bf00      	nop
	}
}
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200004d8 	.word	0x200004d8
 8000b34:	200000d8 	.word	0x200000d8

08000b38 <OLED_SetCursor>:

void OLED_SetCursor(uint16_t x, uint16_t y) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	80fb      	strh	r3, [r7, #6]
 8000b44:	4613      	mov	r3, r2
 8000b46:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <OLED_SetCursor+0x28>)
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <OLED_SetCursor+0x28>)
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	8053      	strh	r3, [r2, #2]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	200004d8 	.word	0x200004d8

08000b64 <OLED_ShowChar>:

char OLED_ShowChar(char ch, FontDef_t* Font, OLED_COLOR_t color) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
	if (
 8000b80:	2b7f      	cmp	r3, #127	; 0x7f
 8000b82:	dc07      	bgt.n	8000b94 <OLED_ShowChar+0x30>
			OLED_HEIGHT <= (OLED.CurrentY + Font->FontHeight)
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000b86:	885b      	ldrh	r3, [r3, #2]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	4413      	add	r3, r2
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000b90:	2b3f      	cmp	r3, #63	; 0x3f
 8000b92:	dd01      	ble.n	8000b98 <OLED_ShowChar+0x34>
	) {
		/* Error */
		return 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e05e      	b.n	8000c56 <OLED_ShowChar+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e04b      	b.n	8000c36 <OLED_ShowChar+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	3b20      	subs	r3, #32
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	7849      	ldrb	r1, [r1, #1]
 8000baa:	fb01 f303 	mul.w	r3, r1, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	440b      	add	r3, r1
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	e030      	b.n	8000c24 <OLED_ShowChar+0xc0>
			if ((b << j) & 0x8000) {
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d010      	beq.n	8000bf4 <OLED_ShowChar+0x90>
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t) color);
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	b298      	uxth	r0, r3
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000be0:	885a      	ldrh	r2, [r3, #2]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	79ba      	ldrb	r2, [r7, #6]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f7ff ff43 	bl	8000a78 <OLED_DrawPixel>
 8000bf2:	e014      	b.n	8000c1e <OLED_ShowChar+0xba>
			} else {
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t)!color);
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000bf6:	881a      	ldrh	r2, [r3, #0]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b298      	uxth	r0, r3
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000c02:	885a      	ldrh	r2, [r3, #2]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf0c      	ite	eq
 8000c12:	2301      	moveq	r3, #1
 8000c14:	2300      	movne	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f7ff ff2d 	bl	8000a78 <OLED_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	3301      	adds	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d3c8      	bcc.n	8000bc2 <OLED_ShowChar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	785b      	ldrb	r3, [r3, #1]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d3ad      	bcc.n	8000b9e <OLED_ShowChar+0x3a>
			}
		}
	}

	/* Increase pointer */
	OLED.CurrentX += Font->FontWidth;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <OLED_ShowChar+0xfc>)
 8000c52:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200004d8 	.word	0x200004d8

08000c64 <OLED_ShowString>:

char OLED_ShowString(uint16_t x, uint16_t y, char* str, FontDef_t* Font) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60ba      	str	r2, [r7, #8]
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4603      	mov	r3, r0
 8000c70:	81fb      	strh	r3, [r7, #14]
 8000c72:	460b      	mov	r3, r1
 8000c74:	81bb      	strh	r3, [r7, #12]
	OLED_SetCursor(x, y);
 8000c76:	89ba      	ldrh	r2, [r7, #12]
 8000c78:	89fb      	ldrh	r3, [r7, #14]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5b 	bl	8000b38 <OLED_SetCursor>

	/* Write characters */
	while (*str) {
 8000c82:	e012      	b.n	8000caa <OLED_ShowString+0x46>
		/* Write character by character */
		if (OLED_ShowChar(*str, Font, OLED_COLOR_WHITE) != *str) {
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff69 	bl	8000b64 <OLED_ShowChar>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d002      	beq.n	8000ca4 <OLED_ShowString+0x40>
			/* Return error */
			return *str;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	e00a      	b.n	8000cba <OLED_ShowString+0x56>
		}

		/* Increase string pointer */
		str++;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1e8      	bne.n	8000c84 <OLED_ShowString+0x20>
	}

	OLED_UpdateScreen();
 8000cb2:	f7ff fe9b 	bl	80009ec <OLED_UpdateScreen>

	/* Everything OK, zero should be returned */
	return *str;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <OLED_ShowSignedNum_Fill_Zero>:
	snprintf(str, sizeof(str), "%+ld", Number);
	OLED_ShowString(x, y, str, Font);
}

void OLED_ShowSignedNum_Fill_Zero(uint16_t x, uint16_t y, uint16_t len, int32_t Number, FontDef_t* Font)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4603      	mov	r3, r0
 8000cce:	81fb      	strh	r3, [r7, #14]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	81bb      	strh	r3, [r7, #12]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	817b      	strh	r3, [r7, #10]
	char str[20];
	snprintf(str, sizeof(str), "%+0*ld", len, Number);
 8000cd8:	897a      	ldrh	r2, [r7, #10]
 8000cda:	f107 0014 	add.w	r0, r7, #20
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <OLED_ShowSignedNum_Fill_Zero+0x40>)
 8000ce6:	2114      	movs	r1, #20
 8000ce8:	f002 fa3c 	bl	8003164 <sniprintf>
	OLED_ShowString(x, y, str, Font);
 8000cec:	f107 0214 	add.w	r2, r7, #20
 8000cf0:	89b9      	ldrh	r1, [r7, #12]
 8000cf2:	89f8      	ldrh	r0, [r7, #14]
 8000cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf6:	f7ff ffb5 	bl	8000c64 <OLED_ShowString>
}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08003b00 	.word	0x08003b00

08000d08 <OLED_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void OLED_I2C_Init() {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <OLED_I2C_Init+0x28>)
 8000d10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d12:	e002      	b.n	8000d1a <OLED_I2C_Init+0x12>
		p--;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f9      	bne.n	8000d14 <OLED_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	0003d090 	.word	0x0003d090

08000d34 <OLED_I2C_WriteMulti>:

void OLED_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b0c7      	sub	sp, #284	; 0x11c
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d42:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d46:	600a      	str	r2, [r1, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d4e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d52:	4622      	mov	r2, r4
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d5a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d5e:	4602      	mov	r2, r0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000d6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d76:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d7a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d88:	e015      	b.n	8000db6 <OLED_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 8000d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	441a      	add	r2, r3
 8000d9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d9e:	3301      	adds	r3, #1
 8000da0:	7811      	ldrb	r1, [r2, #0]
 8000da2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000da6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000daa:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000dac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000db0:	3301      	adds	r3, #1
 8000db2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000db6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dc0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000dc4:	8812      	ldrh	r2, [r2, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d8df      	bhi.n	8000d8a <OLED_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b299      	uxth	r1, r3
 8000dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	200a      	movs	r0, #10
 8000dea:	9000      	str	r0, [sp, #0]
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <OLED_I2C_WriteMulti+0xc8>)
 8000dee:	f000 fdf1 	bl	80019d4 <HAL_I2C_Master_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	20000080 	.word	0x20000080

08000e00 <OLED_I2C_Write>:


void OLED_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	b299      	uxth	r1, r3
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	230a      	movs	r3, #10
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2302      	movs	r3, #2
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <OLED_I2C_Write+0x38>)
 8000e2a:	f000 fdd3 	bl	80019d4 <HAL_I2C_Master_Transmit>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000080 	.word	0x20000080

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f962 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f002 f964 	bl	80031dc <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20030000 	.word	0x20030000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	200004e0 	.word	0x200004e0
 8000f48:	20000678 	.word	0x20000678

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2224      	movs	r2, #36	; 0x24
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 f924 	bl	80031cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <MX_TIM4_Init+0xa4>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fde:	f001 fe3f 	bl	8002c60 <HAL_TIM_Encoder_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000fe8:	f7ff fc36 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000ffa:	f002 f837 	bl	800306c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001004:	f7ff fc28 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3730      	adds	r7, #48	; 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200004e4 	.word	0x200004e4
 8001014:	40000800 	.word	0x40000800

08001018 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_TIM_Encoder_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12c      	bne.n	8001094 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001072:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001084:	2302      	movs	r3, #2
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001090:	f000 f9b0 	bl	80013f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	; 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40000800 	.word	0x40000800
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ac:	f7ff ff4e 	bl	8000f4c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	; (80010f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 f887 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fb23 	bl	8000724 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010ec:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 80010f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010f4:	20000678 	.word	0x20000678

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f931 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe84 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f93b 	bl	80013da <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f911 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000008 	.word	0x20000008
 8001198:	20000010 	.word	0x20000010
 800119c:	2000000c 	.word	0x2000000c

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000010 	.word	0x20000010
 80011c4:	2000052c 	.word	0x2000052c

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000052c 	.word	0x2000052c

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000010 	.word	0x20000010

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff47 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff5c 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb0 	bl	8001348 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e177      	b.n	8001700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8166 	bne.w	80016fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80c0 	beq.w	80016fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a65      	ldr	r2, [pc, #404]	; (8001718 <HAL_GPIO_Init+0x324>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_GPIO_Init+0x324>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a61      	ldr	r2, [pc, #388]	; (800171c <HAL_GPIO_Init+0x328>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_GPIO_Init+0x32c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d037      	beq.n	8001632 <HAL_GPIO_Init+0x23e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_GPIO_Init+0x330>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d031      	beq.n	800162e <HAL_GPIO_Init+0x23a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a56      	ldr	r2, [pc, #344]	; (8001728 <HAL_GPIO_Init+0x334>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02b      	beq.n	800162a <HAL_GPIO_Init+0x236>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a55      	ldr	r2, [pc, #340]	; (800172c <HAL_GPIO_Init+0x338>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x232>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_GPIO_Init+0x33c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x22e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a53      	ldr	r2, [pc, #332]	; (8001734 <HAL_GPIO_Init+0x340>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x22a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_GPIO_Init+0x344>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_GPIO_Init+0x348>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_GPIO_Init+0x34c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x350>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x21a>
 800160a:	2309      	movs	r3, #9
 800160c:	e012      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800160e:	230a      	movs	r3, #10
 8001610:	e010      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001612:	2308      	movs	r3, #8
 8001614:	e00e      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001616:	2307      	movs	r3, #7
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800161a:	2306      	movs	r3, #6
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x240>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x240>
 8001632:	2300      	movs	r3, #0
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HAL_GPIO_Init+0x328>)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_GPIO_Init+0x354>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <HAL_GPIO_Init+0x354>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_GPIO_Init+0x354>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a0:	4a29      	ldr	r2, [pc, #164]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_GPIO_Init+0x354>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b0f      	cmp	r3, #15
 8001704:	f67f ae84 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40021c00 	.word	0x40021c00
 8001740:	40022000 	.word	0x40022000
 8001744:	40022400 	.word	0x40022400
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e12b      	b.n	80019b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe ff8e 	bl	8000694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800179e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017b0:	f001 fa42 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a81      	ldr	r2, [pc, #516]	; (80019c0 <HAL_I2C_Init+0x274>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d807      	bhi.n	80017d0 <HAL_I2C_Init+0x84>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4a80      	ldr	r2, [pc, #512]	; (80019c4 <HAL_I2C_Init+0x278>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	bf94      	ite	ls
 80017c8:	2301      	movls	r3, #1
 80017ca:	2300      	movhi	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e006      	b.n	80017de <HAL_I2C_Init+0x92>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a7d      	ldr	r2, [pc, #500]	; (80019c8 <HAL_I2C_Init+0x27c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	bf94      	ite	ls
 80017d8:	2301      	movls	r3, #1
 80017da:	2300      	movhi	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0e7      	b.n	80019b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4a78      	ldr	r2, [pc, #480]	; (80019cc <HAL_I2C_Init+0x280>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0c9b      	lsrs	r3, r3, #18
 80017f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a6a      	ldr	r2, [pc, #424]	; (80019c0 <HAL_I2C_Init+0x274>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d802      	bhi.n	8001820 <HAL_I2C_Init+0xd4>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	e009      	b.n	8001834 <HAL_I2C_Init+0xe8>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a69      	ldr	r2, [pc, #420]	; (80019d0 <HAL_I2C_Init+0x284>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	3301      	adds	r3, #1
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	430b      	orrs	r3, r1
 800183a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001846:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	495c      	ldr	r1, [pc, #368]	; (80019c0 <HAL_I2C_Init+0x274>)
 8001850:	428b      	cmp	r3, r1
 8001852:	d819      	bhi.n	8001888 <HAL_I2C_Init+0x13c>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1e59      	subs	r1, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001862:	1c59      	adds	r1, r3, #1
 8001864:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001868:	400b      	ands	r3, r1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <HAL_I2C_Init+0x138>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1e59      	subs	r1, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fbb1 f3f3 	udiv	r3, r1, r3
 800187c:	3301      	adds	r3, #1
 800187e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001882:	e051      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 8001884:	2304      	movs	r3, #4
 8001886:	e04f      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <HAL_I2C_Init+0x168>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	e012      	b.n	80018da <HAL_I2C_Init+0x18e>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_I2C_Init+0x196>
 80018de:	2301      	movs	r3, #1
 80018e0:	e022      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <HAL_I2C_Init+0x1bc>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e58      	subs	r0, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	e00f      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	0099      	lsls	r1, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	6809      	ldr	r1, [r1, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6911      	ldr	r1, [r2, #16]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68d2      	ldr	r2, [r2, #12]
 8001962:	4311      	orrs	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	000186a0 	.word	0x000186a0
 80019c4:	001e847f 	.word	0x001e847f
 80019c8:	003d08ff 	.word	0x003d08ff
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	10624dd3 	.word	0x10624dd3

080019d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	817b      	strh	r3, [r7, #10]
 80019e4:	4613      	mov	r3, r2
 80019e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fbee 	bl	80011c8 <HAL_GetTick>
 80019ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	f040 80e0 	bne.w	8001bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2319      	movs	r3, #25
 8001a02:	2201      	movs	r2, #1
 8001a04:	4970      	ldr	r1, [pc, #448]	; (8001bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa92 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0d3      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2C_Master_Transmit+0x50>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0cc      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d007      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2221      	movs	r2, #33	; 0x21
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2210      	movs	r2, #16
 8001a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	893a      	ldrh	r2, [r7, #8]
 8001a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a8c:	8979      	ldrh	r1, [r7, #10]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f9ca 	bl	8001e2c <I2C_MasterRequestWrite>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e08d      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ab8:	e066      	b.n	8001b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	6a39      	ldr	r1, [r7, #32]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fb50 	bl	8002164 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d107      	bne.n	8001ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d11b      	bne.n	8001b5c <HAL_I2C_Master_Transmit+0x188>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d017      	beq.n	8001b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fb47 	bl	80021f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00d      	beq.n	8001b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e01a      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d194      	bne.n	8001aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	00100002 	.word	0x00100002
 8001bcc:	ffff0000 	.word	0xffff0000

08001bd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff faf2 	bl	80011c8 <HAL_GetTick>
 8001be4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	f040 8111 	bne.w	8001e1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2319      	movs	r3, #25
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4988      	ldr	r1, [pc, #544]	; (8001e24 <HAL_I2C_IsDeviceReady+0x254>)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f994 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e104      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2C_IsDeviceReady+0x50>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e0fd      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d007      	beq.n	8001c46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2224      	movs	r2, #36	; 0x24
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a70      	ldr	r2, [pc, #448]	; (8001e28 <HAL_I2C_IsDeviceReady+0x258>)
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f952 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca0:	d103      	bne.n	8001caa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0b6      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fa83 	bl	80011c8 <HAL_GetTick>
 8001cc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce8:	bf0c      	ite	eq
 8001cea:	2301      	moveq	r3, #1
 8001cec:	2300      	movne	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cf2:	e025      	b.n	8001d40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cf4:	f7ff fa68 	bl	80011c8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d302      	bcc.n	8001d0a <HAL_I2C_IsDeviceReady+0x13a>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	22a0      	movs	r2, #160	; 0xa0
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2ba0      	cmp	r3, #160	; 0xa0
 8001d4a:	d005      	beq.n	8001d58 <HAL_I2C_IsDeviceReady+0x188>
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_I2C_IsDeviceReady+0x188>
 8001d52:	7dbb      	ldrb	r3, [r7, #22]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0cd      	beq.n	8001cf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d129      	bne.n	8001dc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4921      	ldr	r1, [pc, #132]	; (8001e24 <HAL_I2C_IsDeviceReady+0x254>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f8c6 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e036      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e02c      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	490f      	ldr	r1, [pc, #60]	; (8001e24 <HAL_I2C_IsDeviceReady+0x254>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f8a2 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e012      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f4ff af32 	bcc.w	8001c6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
  }
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	00100002 	.word	0x00100002
 8001e28:	ffff0000 	.word	0xffff0000

08001e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d006      	beq.n	8001e56 <I2C_MasterRequestWrite+0x2a>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d003      	beq.n	8001e56 <I2C_MasterRequestWrite+0x2a>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e54:	d108      	bne.n	8001e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e00b      	b.n	8001e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d107      	bne.n	8001e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f84f 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea6:	d103      	bne.n	8001eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e035      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ebc:	d108      	bne.n	8001ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	e01b      	b.n	8001f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ed0:	897b      	ldrh	r3, [r7, #10]
 8001ed2:	11db      	asrs	r3, r3, #7
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f003 0306 	and.w	r3, r3, #6
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f063 030f 	orn	r3, r3, #15
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <I2C_MasterRequestWrite+0xfc>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f898 	bl	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e010      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <I2C_MasterRequestWrite+0x100>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f888 	bl	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010008 	.word	0x00010008
 8001f2c:	00010002 	.word	0x00010002

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e048      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d044      	beq.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff f93d 	bl	80011c8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d139      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10d      	bne.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4013      	ands	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	e00c      	b.n	8001fa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d116      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e023      	b.n	800201c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d10d      	bne.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	e00c      	b.n	8002014 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	429a      	cmp	r2, r3
 8002018:	d093      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002032:	e071      	b.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002042:	d123      	bne.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002052:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800205c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0204 	orr.w	r2, r3, #4
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e067      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d041      	beq.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7ff f898 	bl	80011c8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d136      	bne.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10c      	bne.n	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4013      	ands	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e00b      	b.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	43da      	mvns	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e021      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10c      	bne.n	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	43da      	mvns	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e00b      	b.n	8002154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4013      	ands	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f af6d 	bne.w	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	e034      	b.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f886 	bl	8002284 <I2C_IsAcknowledgeFailed>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e034      	b.n	80021ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d028      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f81d 	bl	80011c8 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11d      	bne.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b80      	cmp	r3, #128	; 0x80
 80021ac:	d016      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b80      	cmp	r3, #128	; 0x80
 80021e8:	d1c3      	bne.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	e034      	b.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f83e 	bl	8002284 <I2C_IsAcknowledgeFailed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e034      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d028      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7fe ffd5 	bl	80011c8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11d      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d016      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d1c3      	bne.n	8002202 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d11b      	bne.n	80022d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d129      	bne.n	800234c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0210 	bic.w	r2, r2, #16
 800231e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b20      	cmp	r3, #32
 8002372:	d12a      	bne.n	80023ca <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	f023 030f 	bic.w	r3, r3, #15
 800239a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	89fa      	ldrh	r2, [r7, #14]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e267      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d075      	beq.n	80024e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b85      	ldr	r3, [pc, #532]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e242      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x74>
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a75      	ldr	r2, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x98>
 8002456:	4b70      	ldr	r3, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6f      	ldr	r2, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6c      	ldr	r2, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a68      	ldr	r2, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fe9a 	bl	80011c8 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fe96 	bl	80011c8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e207      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xc0>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fe86 	bl	80011c8 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fe82 	bl	80011c8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e1f3      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b51      	ldr	r3, [pc, #324]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0xe8>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d063      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d11c      	bne.n	8002540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d116      	bne.n	8002540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x152>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e1c7      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	e03a      	b.n	80025b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_OscConfig+0x244>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fe3b 	bl	80011c8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7fe fe37 	bl	80011c8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1a8      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4925      	ldr	r1, [pc, #148]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x244>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fe1a 	bl	80011c8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe fe16 	bl	80011c8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e187      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d036      	beq.n	8002630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x248>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fdfa 	bl	80011c8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d8:	f7fe fdf6 	bl	80011c8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e167      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x200>
 80025f6:	e01b      	b.n	8002630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x248>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fde3 	bl	80011c8 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	e00e      	b.n	8002624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002606:	f7fe fddf 	bl	80011c8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d907      	bls.n	8002624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e150      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
 8002618:	40023800 	.word	0x40023800
 800261c:	42470000 	.word	0x42470000
 8002620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ea      	bne.n	8002606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8097 	beq.w	800276c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a7c      	ldr	r2, [pc, #496]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b7a      	ldr	r3, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b77      	ldr	r3, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x474>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_OscConfig+0x474>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a73      	ldr	r2, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x474>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7fe fd9f 	bl	80011c8 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7fe fd9b 	bl	80011c8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e10c      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x474>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2ea>
 80026b4:	4b64      	ldr	r3, [pc, #400]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a63      	ldr	r2, [pc, #396]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x324>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x30c>
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a5b      	ldr	r2, [pc, #364]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0x324>
 80026e4:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b55      	ldr	r3, [pc, #340]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fd60 	bl	80011c8 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fd5c 	bl	80011c8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0cb      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ee      	beq.n	800270c <HAL_RCC_OscConfig+0x334>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fd4a 	bl	80011c8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fd46 	bl	80011c8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0b5      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ee      	bne.n	8002738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a1 	beq.w	80028b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002776:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b08      	cmp	r3, #8
 8002780:	d05c      	beq.n	800283c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d141      	bne.n	800280e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_OscConfig+0x478>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fd1a 	bl	80011c8 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe fd16 	bl	80011c8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e087      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	491b      	ldr	r1, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x478>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fcef 	bl	80011c8 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fceb 	bl	80011c8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e05c      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x416>
 800280c:	e054      	b.n	80028b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_RCC_OscConfig+0x478>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fcd8 	bl	80011c8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fcd4 	bl	80011c8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e045      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x444>
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e038      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	40007000 	.word	0x40007000
 8002850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d028      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d121      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d11a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800288a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	4293      	cmp	r3, r2
 800288e:	d111      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0cc      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d90c      	bls.n	8002904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d044      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e067      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4934      	ldr	r1, [pc, #208]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fc06 	bl	80011c8 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fc02 	bl	80011c8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e04f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d20c      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fb66 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	08004864 	.word	0x08004864
 8002a8c:	20000008 	.word	0x20000008
 8002a90:	2000000c 	.word	0x2000000c

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b090      	sub	sp, #64	; 0x40
 8002a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	f200 80a1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac6:	e09b      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002acc:	e09b      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad2:	e098      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ade:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	2200      	movs	r2, #0
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	627a      	str	r2, [r7, #36]	; 0x24
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002afc:	2100      	movs	r1, #0
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b00:	fb03 f201 	mul.w	r2, r3, r1
 8002b04:	2300      	movs	r3, #0
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a43      	ldr	r2, [pc, #268]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b14:	460a      	mov	r2, r1
 8002b16:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	2200      	movs	r2, #0
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	61fa      	str	r2, [r7, #28]
 8002b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b2e:	f7fd fbaf 	bl	8000290 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4613      	mov	r3, r2
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3a:	e053      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	617a      	str	r2, [r7, #20]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b4e:	f04f 0b00 	mov.w	fp, #0
 8002b52:	4652      	mov	r2, sl
 8002b54:	465b      	mov	r3, fp
 8002b56:	f04f 0000 	mov.w	r0, #0
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	0159      	lsls	r1, r3, #5
 8002b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b64:	0150      	lsls	r0, r2, #5
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b86:	ebb2 0408 	subs.w	r4, r2, r8
 8002b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	00eb      	lsls	r3, r5, #3
 8002b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9c:	00e2      	lsls	r2, r4, #3
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	461d      	mov	r5, r3
 8002ba2:	eb14 030a 	adds.w	r3, r4, sl
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	eb45 030b 	adc.w	r3, r5, fp
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	028b      	lsls	r3, r1, #10
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	028a      	lsls	r2, r1, #10
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	60fa      	str	r2, [r7, #12]
 8002bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd8:	f7fd fb5a 	bl	8000290 <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3740      	adds	r7, #64	; 0x40
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	017d7840 	.word	0x017d7840

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000008 	.word	0x20000008

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08004874 	.word	0x08004874

08002c60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e097      	b.n	8002da4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe f9c5 	bl	8001018 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca4:	f023 0307 	bic.w	r3, r3, #7
 8002ca8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 f907 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d00:	f023 030c 	bic.w	r3, r3, #12
 8002d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	011a      	lsls	r2, r3, #4
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	031b      	lsls	r3, r3, #12
 8002d30:	4313      	orrs	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4313      	orrs	r3, r2
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d110      	bne.n	8002dfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002de2:	7b7b      	ldrb	r3, [r7, #13]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e069      	b.n	8002ec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	e031      	b.n	8002e62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d110      	bne.n	8002e26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e04:	7bbb      	ldrb	r3, [r7, #14]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e0a:	7b3b      	ldrb	r3, [r7, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d001      	beq.n	8002e14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e055      	b.n	8002ec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e24:	e01d      	b.n	8002e62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d108      	bne.n	8002e3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e2c:	7bbb      	ldrb	r3, [r7, #14]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e32:	7b7b      	ldrb	r3, [r7, #13]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d102      	bne.n	8002e3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e38:	7b3b      	ldrb	r3, [r7, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e03e      	b.n	8002ec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_TIM_Encoder_Start+0xc4>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d008      	beq.n	8002e80 <HAL_TIM_Encoder_Start+0xd4>
 8002e6e:	e00f      	b.n	8002e90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f8d1 	bl	8003020 <TIM_CCxChannelCmd>
      break;
 8002e7e:	e016      	b.n	8002eae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	2104      	movs	r1, #4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f8c9 	bl	8003020 <TIM_CCxChannelCmd>
      break;
 8002e8e:	e00e      	b.n	8002eae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f8c1 	bl	8003020 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f8ba 	bl	8003020 <TIM_CCxChannelCmd>
      break;
 8002eac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d00f      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <TIM_Base_SetConfig+0x130>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <TIM_Base_SetConfig+0x134>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <TIM_Base_SetConfig+0x138>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a40      	ldr	r2, [pc, #256]	; (8003004 <TIM_Base_SetConfig+0x13c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d108      	bne.n	8002f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d027      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a32      	ldr	r2, [pc, #200]	; (8002ff8 <TIM_Base_SetConfig+0x130>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d023      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <TIM_Base_SetConfig+0x134>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	; (8003000 <TIM_Base_SetConfig+0x138>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01b      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2f      	ldr	r2, [pc, #188]	; (8003004 <TIM_Base_SetConfig+0x13c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d017      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	; (8003008 <TIM_Base_SetConfig+0x140>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2d      	ldr	r2, [pc, #180]	; (800300c <TIM_Base_SetConfig+0x144>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00f      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <TIM_Base_SetConfig+0x148>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2b      	ldr	r2, [pc, #172]	; (8003014 <TIM_Base_SetConfig+0x14c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <TIM_Base_SetConfig+0x150>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a29      	ldr	r2, [pc, #164]	; (800301c <TIM_Base_SetConfig+0x154>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_Base_SetConfig+0xf8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <TIM_Base_SetConfig+0x13c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d103      	bne.n	8002fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800
 8003000:	40000c00 	.word	0x40000c00
 8003004:	40010400 	.word	0x40010400
 8003008:	40014000 	.word	0x40014000
 800300c:	40014400 	.word	0x40014400
 8003010:	40014800 	.word	0x40014800
 8003014:	40001800 	.word	0x40001800
 8003018:	40001c00 	.word	0x40001c00
 800301c:	40002000 	.word	0x40002000

08003020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2201      	movs	r2, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	43db      	mvns	r3, r3
 8003042:	401a      	ands	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003080:	2302      	movs	r3, #2
 8003082:	e05a      	b.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a21      	ldr	r2, [pc, #132]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d01d      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d018      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d10c      	bne.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4313      	orrs	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40010400 	.word	0x40010400
 800315c:	40014000 	.word	0x40014000
 8003160:	40001800 	.word	0x40001800

08003164 <sniprintf>:
 8003164:	b40c      	push	{r2, r3}
 8003166:	b530      	push	{r4, r5, lr}
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <sniprintf+0x64>)
 800316a:	1e0c      	subs	r4, r1, #0
 800316c:	681d      	ldr	r5, [r3, #0]
 800316e:	b09d      	sub	sp, #116	; 0x74
 8003170:	da08      	bge.n	8003184 <sniprintf+0x20>
 8003172:	238b      	movs	r3, #139	; 0x8b
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	f04f 30ff 	mov.w	r0, #4294967295
 800317a:	b01d      	add	sp, #116	; 0x74
 800317c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003180:	b002      	add	sp, #8
 8003182:	4770      	bx	lr
 8003184:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003188:	f8ad 3014 	strh.w	r3, [sp, #20]
 800318c:	bf14      	ite	ne
 800318e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003192:	4623      	moveq	r3, r4
 8003194:	9304      	str	r3, [sp, #16]
 8003196:	9307      	str	r3, [sp, #28]
 8003198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800319c:	9002      	str	r0, [sp, #8]
 800319e:	9006      	str	r0, [sp, #24]
 80031a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80031a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031a6:	ab21      	add	r3, sp, #132	; 0x84
 80031a8:	a902      	add	r1, sp, #8
 80031aa:	4628      	mov	r0, r5
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	f000 f993 	bl	80034d8 <_svfiprintf_r>
 80031b2:	1c43      	adds	r3, r0, #1
 80031b4:	bfbc      	itt	lt
 80031b6:	238b      	movlt	r3, #139	; 0x8b
 80031b8:	602b      	strlt	r3, [r5, #0]
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	d0dd      	beq.n	800317a <sniprintf+0x16>
 80031be:	9b02      	ldr	r3, [sp, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e7d9      	b.n	800317a <sniprintf+0x16>
 80031c6:	bf00      	nop
 80031c8:	20000060 	.word	0x20000060

080031cc <memset>:
 80031cc:	4402      	add	r2, r0
 80031ce:	4603      	mov	r3, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d100      	bne.n	80031d6 <memset+0xa>
 80031d4:	4770      	bx	lr
 80031d6:	f803 1b01 	strb.w	r1, [r3], #1
 80031da:	e7f9      	b.n	80031d0 <memset+0x4>

080031dc <__errno>:
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <__errno+0x8>)
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000060 	.word	0x20000060

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	4d0d      	ldr	r5, [pc, #52]	; (8003220 <__libc_init_array+0x38>)
 80031ec:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	2600      	movs	r6, #0
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	4d0b      	ldr	r5, [pc, #44]	; (8003228 <__libc_init_array+0x40>)
 80031fa:	4c0c      	ldr	r4, [pc, #48]	; (800322c <__libc_init_array+0x44>)
 80031fc:	f000 fc6a 	bl	8003ad4 <_init>
 8003200:	1b64      	subs	r4, r4, r5
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	2600      	movs	r6, #0
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	080048b8 	.word	0x080048b8
 8003224:	080048b8 	.word	0x080048b8
 8003228:	080048b8 	.word	0x080048b8
 800322c:	080048bc 	.word	0x080048bc

08003230 <__retarget_lock_acquire_recursive>:
 8003230:	4770      	bx	lr

08003232 <__retarget_lock_release_recursive>:
 8003232:	4770      	bx	lr

08003234 <_free_r>:
 8003234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003236:	2900      	cmp	r1, #0
 8003238:	d044      	beq.n	80032c4 <_free_r+0x90>
 800323a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800323e:	9001      	str	r0, [sp, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f1a1 0404 	sub.w	r4, r1, #4
 8003246:	bfb8      	it	lt
 8003248:	18e4      	addlt	r4, r4, r3
 800324a:	f000 f8df 	bl	800340c <__malloc_lock>
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <_free_r+0x94>)
 8003250:	9801      	ldr	r0, [sp, #4]
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	b933      	cbnz	r3, 8003264 <_free_r+0x30>
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	6014      	str	r4, [r2, #0]
 800325a:	b003      	add	sp, #12
 800325c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003260:	f000 b8da 	b.w	8003418 <__malloc_unlock>
 8003264:	42a3      	cmp	r3, r4
 8003266:	d908      	bls.n	800327a <_free_r+0x46>
 8003268:	6825      	ldr	r5, [r4, #0]
 800326a:	1961      	adds	r1, r4, r5
 800326c:	428b      	cmp	r3, r1
 800326e:	bf01      	itttt	eq
 8003270:	6819      	ldreq	r1, [r3, #0]
 8003272:	685b      	ldreq	r3, [r3, #4]
 8003274:	1949      	addeq	r1, r1, r5
 8003276:	6021      	streq	r1, [r4, #0]
 8003278:	e7ed      	b.n	8003256 <_free_r+0x22>
 800327a:	461a      	mov	r2, r3
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b10b      	cbz	r3, 8003284 <_free_r+0x50>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d9fa      	bls.n	800327a <_free_r+0x46>
 8003284:	6811      	ldr	r1, [r2, #0]
 8003286:	1855      	adds	r5, r2, r1
 8003288:	42a5      	cmp	r5, r4
 800328a:	d10b      	bne.n	80032a4 <_free_r+0x70>
 800328c:	6824      	ldr	r4, [r4, #0]
 800328e:	4421      	add	r1, r4
 8003290:	1854      	adds	r4, r2, r1
 8003292:	42a3      	cmp	r3, r4
 8003294:	6011      	str	r1, [r2, #0]
 8003296:	d1e0      	bne.n	800325a <_free_r+0x26>
 8003298:	681c      	ldr	r4, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	6053      	str	r3, [r2, #4]
 800329e:	440c      	add	r4, r1
 80032a0:	6014      	str	r4, [r2, #0]
 80032a2:	e7da      	b.n	800325a <_free_r+0x26>
 80032a4:	d902      	bls.n	80032ac <_free_r+0x78>
 80032a6:	230c      	movs	r3, #12
 80032a8:	6003      	str	r3, [r0, #0]
 80032aa:	e7d6      	b.n	800325a <_free_r+0x26>
 80032ac:	6825      	ldr	r5, [r4, #0]
 80032ae:	1961      	adds	r1, r4, r5
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf04      	itt	eq
 80032b4:	6819      	ldreq	r1, [r3, #0]
 80032b6:	685b      	ldreq	r3, [r3, #4]
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	bf04      	itt	eq
 80032bc:	1949      	addeq	r1, r1, r5
 80032be:	6021      	streq	r1, [r4, #0]
 80032c0:	6054      	str	r4, [r2, #4]
 80032c2:	e7ca      	b.n	800325a <_free_r+0x26>
 80032c4:	b003      	add	sp, #12
 80032c6:	bd30      	pop	{r4, r5, pc}
 80032c8:	20000670 	.word	0x20000670

080032cc <sbrk_aligned>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4e0e      	ldr	r6, [pc, #56]	; (8003308 <sbrk_aligned+0x3c>)
 80032d0:	460c      	mov	r4, r1
 80032d2:	6831      	ldr	r1, [r6, #0]
 80032d4:	4605      	mov	r5, r0
 80032d6:	b911      	cbnz	r1, 80032de <sbrk_aligned+0x12>
 80032d8:	f000 fba6 	bl	8003a28 <_sbrk_r>
 80032dc:	6030      	str	r0, [r6, #0]
 80032de:	4621      	mov	r1, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	f000 fba1 	bl	8003a28 <_sbrk_r>
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	d00a      	beq.n	8003300 <sbrk_aligned+0x34>
 80032ea:	1cc4      	adds	r4, r0, #3
 80032ec:	f024 0403 	bic.w	r4, r4, #3
 80032f0:	42a0      	cmp	r0, r4
 80032f2:	d007      	beq.n	8003304 <sbrk_aligned+0x38>
 80032f4:	1a21      	subs	r1, r4, r0
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 fb96 	bl	8003a28 <_sbrk_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d101      	bne.n	8003304 <sbrk_aligned+0x38>
 8003300:	f04f 34ff 	mov.w	r4, #4294967295
 8003304:	4620      	mov	r0, r4
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	20000674 	.word	0x20000674

0800330c <_malloc_r>:
 800330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003310:	1ccd      	adds	r5, r1, #3
 8003312:	f025 0503 	bic.w	r5, r5, #3
 8003316:	3508      	adds	r5, #8
 8003318:	2d0c      	cmp	r5, #12
 800331a:	bf38      	it	cc
 800331c:	250c      	movcc	r5, #12
 800331e:	2d00      	cmp	r5, #0
 8003320:	4607      	mov	r7, r0
 8003322:	db01      	blt.n	8003328 <_malloc_r+0x1c>
 8003324:	42a9      	cmp	r1, r5
 8003326:	d905      	bls.n	8003334 <_malloc_r+0x28>
 8003328:	230c      	movs	r3, #12
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	2600      	movs	r6, #0
 800332e:	4630      	mov	r0, r6
 8003330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003408 <_malloc_r+0xfc>
 8003338:	f000 f868 	bl	800340c <__malloc_lock>
 800333c:	f8d8 3000 	ldr.w	r3, [r8]
 8003340:	461c      	mov	r4, r3
 8003342:	bb5c      	cbnz	r4, 800339c <_malloc_r+0x90>
 8003344:	4629      	mov	r1, r5
 8003346:	4638      	mov	r0, r7
 8003348:	f7ff ffc0 	bl	80032cc <sbrk_aligned>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	4604      	mov	r4, r0
 8003350:	d155      	bne.n	80033fe <_malloc_r+0xf2>
 8003352:	f8d8 4000 	ldr.w	r4, [r8]
 8003356:	4626      	mov	r6, r4
 8003358:	2e00      	cmp	r6, #0
 800335a:	d145      	bne.n	80033e8 <_malloc_r+0xdc>
 800335c:	2c00      	cmp	r4, #0
 800335e:	d048      	beq.n	80033f2 <_malloc_r+0xe6>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	4631      	mov	r1, r6
 8003364:	4638      	mov	r0, r7
 8003366:	eb04 0903 	add.w	r9, r4, r3
 800336a:	f000 fb5d 	bl	8003a28 <_sbrk_r>
 800336e:	4581      	cmp	r9, r0
 8003370:	d13f      	bne.n	80033f2 <_malloc_r+0xe6>
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	1a6d      	subs	r5, r5, r1
 8003376:	4629      	mov	r1, r5
 8003378:	4638      	mov	r0, r7
 800337a:	f7ff ffa7 	bl	80032cc <sbrk_aligned>
 800337e:	3001      	adds	r0, #1
 8003380:	d037      	beq.n	80033f2 <_malloc_r+0xe6>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	442b      	add	r3, r5
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	f8d8 3000 	ldr.w	r3, [r8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d038      	beq.n	8003402 <_malloc_r+0xf6>
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	42a2      	cmp	r2, r4
 8003394:	d12b      	bne.n	80033ee <_malloc_r+0xe2>
 8003396:	2200      	movs	r2, #0
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	e00f      	b.n	80033bc <_malloc_r+0xb0>
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	1b52      	subs	r2, r2, r5
 80033a0:	d41f      	bmi.n	80033e2 <_malloc_r+0xd6>
 80033a2:	2a0b      	cmp	r2, #11
 80033a4:	d917      	bls.n	80033d6 <_malloc_r+0xca>
 80033a6:	1961      	adds	r1, r4, r5
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	6025      	str	r5, [r4, #0]
 80033ac:	bf18      	it	ne
 80033ae:	6059      	strne	r1, [r3, #4]
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	bf08      	it	eq
 80033b4:	f8c8 1000 	streq.w	r1, [r8]
 80033b8:	5162      	str	r2, [r4, r5]
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	4638      	mov	r0, r7
 80033be:	f104 060b 	add.w	r6, r4, #11
 80033c2:	f000 f829 	bl	8003418 <__malloc_unlock>
 80033c6:	f026 0607 	bic.w	r6, r6, #7
 80033ca:	1d23      	adds	r3, r4, #4
 80033cc:	1af2      	subs	r2, r6, r3
 80033ce:	d0ae      	beq.n	800332e <_malloc_r+0x22>
 80033d0:	1b9b      	subs	r3, r3, r6
 80033d2:	50a3      	str	r3, [r4, r2]
 80033d4:	e7ab      	b.n	800332e <_malloc_r+0x22>
 80033d6:	42a3      	cmp	r3, r4
 80033d8:	6862      	ldr	r2, [r4, #4]
 80033da:	d1dd      	bne.n	8003398 <_malloc_r+0x8c>
 80033dc:	f8c8 2000 	str.w	r2, [r8]
 80033e0:	e7ec      	b.n	80033bc <_malloc_r+0xb0>
 80033e2:	4623      	mov	r3, r4
 80033e4:	6864      	ldr	r4, [r4, #4]
 80033e6:	e7ac      	b.n	8003342 <_malloc_r+0x36>
 80033e8:	4634      	mov	r4, r6
 80033ea:	6876      	ldr	r6, [r6, #4]
 80033ec:	e7b4      	b.n	8003358 <_malloc_r+0x4c>
 80033ee:	4613      	mov	r3, r2
 80033f0:	e7cc      	b.n	800338c <_malloc_r+0x80>
 80033f2:	230c      	movs	r3, #12
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4638      	mov	r0, r7
 80033f8:	f000 f80e 	bl	8003418 <__malloc_unlock>
 80033fc:	e797      	b.n	800332e <_malloc_r+0x22>
 80033fe:	6025      	str	r5, [r4, #0]
 8003400:	e7dc      	b.n	80033bc <_malloc_r+0xb0>
 8003402:	605b      	str	r3, [r3, #4]
 8003404:	deff      	udf	#255	; 0xff
 8003406:	bf00      	nop
 8003408:	20000670 	.word	0x20000670

0800340c <__malloc_lock>:
 800340c:	4801      	ldr	r0, [pc, #4]	; (8003414 <__malloc_lock+0x8>)
 800340e:	f7ff bf0f 	b.w	8003230 <__retarget_lock_acquire_recursive>
 8003412:	bf00      	nop
 8003414:	2000066c 	.word	0x2000066c

08003418 <__malloc_unlock>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__malloc_unlock+0x8>)
 800341a:	f7ff bf0a 	b.w	8003232 <__retarget_lock_release_recursive>
 800341e:	bf00      	nop
 8003420:	2000066c 	.word	0x2000066c

08003424 <__ssputs_r>:
 8003424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	688e      	ldr	r6, [r1, #8]
 800342a:	461f      	mov	r7, r3
 800342c:	42be      	cmp	r6, r7
 800342e:	680b      	ldr	r3, [r1, #0]
 8003430:	4682      	mov	sl, r0
 8003432:	460c      	mov	r4, r1
 8003434:	4690      	mov	r8, r2
 8003436:	d82c      	bhi.n	8003492 <__ssputs_r+0x6e>
 8003438:	898a      	ldrh	r2, [r1, #12]
 800343a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800343e:	d026      	beq.n	800348e <__ssputs_r+0x6a>
 8003440:	6965      	ldr	r5, [r4, #20]
 8003442:	6909      	ldr	r1, [r1, #16]
 8003444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003448:	eba3 0901 	sub.w	r9, r3, r1
 800344c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003450:	1c7b      	adds	r3, r7, #1
 8003452:	444b      	add	r3, r9
 8003454:	106d      	asrs	r5, r5, #1
 8003456:	429d      	cmp	r5, r3
 8003458:	bf38      	it	cc
 800345a:	461d      	movcc	r5, r3
 800345c:	0553      	lsls	r3, r2, #21
 800345e:	d527      	bpl.n	80034b0 <__ssputs_r+0x8c>
 8003460:	4629      	mov	r1, r5
 8003462:	f7ff ff53 	bl	800330c <_malloc_r>
 8003466:	4606      	mov	r6, r0
 8003468:	b360      	cbz	r0, 80034c4 <__ssputs_r+0xa0>
 800346a:	6921      	ldr	r1, [r4, #16]
 800346c:	464a      	mov	r2, r9
 800346e:	f000 faeb 	bl	8003a48 <memcpy>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	6126      	str	r6, [r4, #16]
 8003480:	6165      	str	r5, [r4, #20]
 8003482:	444e      	add	r6, r9
 8003484:	eba5 0509 	sub.w	r5, r5, r9
 8003488:	6026      	str	r6, [r4, #0]
 800348a:	60a5      	str	r5, [r4, #8]
 800348c:	463e      	mov	r6, r7
 800348e:	42be      	cmp	r6, r7
 8003490:	d900      	bls.n	8003494 <__ssputs_r+0x70>
 8003492:	463e      	mov	r6, r7
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	4632      	mov	r2, r6
 8003498:	4641      	mov	r1, r8
 800349a:	f000 faab 	bl	80039f4 <memmove>
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	1b9b      	subs	r3, r3, r6
 80034a2:	60a3      	str	r3, [r4, #8]
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	4433      	add	r3, r6
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	2000      	movs	r0, #0
 80034ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b0:	462a      	mov	r2, r5
 80034b2:	f000 fad7 	bl	8003a64 <_realloc_r>
 80034b6:	4606      	mov	r6, r0
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1e0      	bne.n	800347e <__ssputs_r+0x5a>
 80034bc:	6921      	ldr	r1, [r4, #16]
 80034be:	4650      	mov	r0, sl
 80034c0:	f7ff feb8 	bl	8003234 <_free_r>
 80034c4:	230c      	movs	r3, #12
 80034c6:	f8ca 3000 	str.w	r3, [sl]
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d0:	81a3      	strh	r3, [r4, #12]
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	e7e9      	b.n	80034ac <__ssputs_r+0x88>

080034d8 <_svfiprintf_r>:
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034dc:	4698      	mov	r8, r3
 80034de:	898b      	ldrh	r3, [r1, #12]
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	b09d      	sub	sp, #116	; 0x74
 80034e4:	4607      	mov	r7, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	d50e      	bpl.n	800350a <_svfiprintf_r+0x32>
 80034ec:	690b      	ldr	r3, [r1, #16]
 80034ee:	b963      	cbnz	r3, 800350a <_svfiprintf_r+0x32>
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	f7ff ff0b 	bl	800330c <_malloc_r>
 80034f6:	6028      	str	r0, [r5, #0]
 80034f8:	6128      	str	r0, [r5, #16]
 80034fa:	b920      	cbnz	r0, 8003506 <_svfiprintf_r+0x2e>
 80034fc:	230c      	movs	r3, #12
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	e0d0      	b.n	80036a8 <_svfiprintf_r+0x1d0>
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	616b      	str	r3, [r5, #20]
 800350a:	2300      	movs	r3, #0
 800350c:	9309      	str	r3, [sp, #36]	; 0x24
 800350e:	2320      	movs	r3, #32
 8003510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003514:	f8cd 800c 	str.w	r8, [sp, #12]
 8003518:	2330      	movs	r3, #48	; 0x30
 800351a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036c0 <_svfiprintf_r+0x1e8>
 800351e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003522:	f04f 0901 	mov.w	r9, #1
 8003526:	4623      	mov	r3, r4
 8003528:	469a      	mov	sl, r3
 800352a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800352e:	b10a      	cbz	r2, 8003534 <_svfiprintf_r+0x5c>
 8003530:	2a25      	cmp	r2, #37	; 0x25
 8003532:	d1f9      	bne.n	8003528 <_svfiprintf_r+0x50>
 8003534:	ebba 0b04 	subs.w	fp, sl, r4
 8003538:	d00b      	beq.n	8003552 <_svfiprintf_r+0x7a>
 800353a:	465b      	mov	r3, fp
 800353c:	4622      	mov	r2, r4
 800353e:	4629      	mov	r1, r5
 8003540:	4638      	mov	r0, r7
 8003542:	f7ff ff6f 	bl	8003424 <__ssputs_r>
 8003546:	3001      	adds	r0, #1
 8003548:	f000 80a9 	beq.w	800369e <_svfiprintf_r+0x1c6>
 800354c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800354e:	445a      	add	r2, fp
 8003550:	9209      	str	r2, [sp, #36]	; 0x24
 8003552:	f89a 3000 	ldrb.w	r3, [sl]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80a1 	beq.w	800369e <_svfiprintf_r+0x1c6>
 800355c:	2300      	movs	r3, #0
 800355e:	f04f 32ff 	mov.w	r2, #4294967295
 8003562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003566:	f10a 0a01 	add.w	sl, sl, #1
 800356a:	9304      	str	r3, [sp, #16]
 800356c:	9307      	str	r3, [sp, #28]
 800356e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003572:	931a      	str	r3, [sp, #104]	; 0x68
 8003574:	4654      	mov	r4, sl
 8003576:	2205      	movs	r2, #5
 8003578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357c:	4850      	ldr	r0, [pc, #320]	; (80036c0 <_svfiprintf_r+0x1e8>)
 800357e:	f7fc fe37 	bl	80001f0 <memchr>
 8003582:	9a04      	ldr	r2, [sp, #16]
 8003584:	b9d8      	cbnz	r0, 80035be <_svfiprintf_r+0xe6>
 8003586:	06d0      	lsls	r0, r2, #27
 8003588:	bf44      	itt	mi
 800358a:	2320      	movmi	r3, #32
 800358c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003590:	0711      	lsls	r1, r2, #28
 8003592:	bf44      	itt	mi
 8003594:	232b      	movmi	r3, #43	; 0x2b
 8003596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800359a:	f89a 3000 	ldrb.w	r3, [sl]
 800359e:	2b2a      	cmp	r3, #42	; 0x2a
 80035a0:	d015      	beq.n	80035ce <_svfiprintf_r+0xf6>
 80035a2:	9a07      	ldr	r2, [sp, #28]
 80035a4:	4654      	mov	r4, sl
 80035a6:	2000      	movs	r0, #0
 80035a8:	f04f 0c0a 	mov.w	ip, #10
 80035ac:	4621      	mov	r1, r4
 80035ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035b2:	3b30      	subs	r3, #48	; 0x30
 80035b4:	2b09      	cmp	r3, #9
 80035b6:	d94d      	bls.n	8003654 <_svfiprintf_r+0x17c>
 80035b8:	b1b0      	cbz	r0, 80035e8 <_svfiprintf_r+0x110>
 80035ba:	9207      	str	r2, [sp, #28]
 80035bc:	e014      	b.n	80035e8 <_svfiprintf_r+0x110>
 80035be:	eba0 0308 	sub.w	r3, r0, r8
 80035c2:	fa09 f303 	lsl.w	r3, r9, r3
 80035c6:	4313      	orrs	r3, r2
 80035c8:	9304      	str	r3, [sp, #16]
 80035ca:	46a2      	mov	sl, r4
 80035cc:	e7d2      	b.n	8003574 <_svfiprintf_r+0x9c>
 80035ce:	9b03      	ldr	r3, [sp, #12]
 80035d0:	1d19      	adds	r1, r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	9103      	str	r1, [sp, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfbb      	ittet	lt
 80035da:	425b      	neglt	r3, r3
 80035dc:	f042 0202 	orrlt.w	r2, r2, #2
 80035e0:	9307      	strge	r3, [sp, #28]
 80035e2:	9307      	strlt	r3, [sp, #28]
 80035e4:	bfb8      	it	lt
 80035e6:	9204      	strlt	r2, [sp, #16]
 80035e8:	7823      	ldrb	r3, [r4, #0]
 80035ea:	2b2e      	cmp	r3, #46	; 0x2e
 80035ec:	d10c      	bne.n	8003608 <_svfiprintf_r+0x130>
 80035ee:	7863      	ldrb	r3, [r4, #1]
 80035f0:	2b2a      	cmp	r3, #42	; 0x2a
 80035f2:	d134      	bne.n	800365e <_svfiprintf_r+0x186>
 80035f4:	9b03      	ldr	r3, [sp, #12]
 80035f6:	1d1a      	adds	r2, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	9203      	str	r2, [sp, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bfb8      	it	lt
 8003600:	f04f 33ff 	movlt.w	r3, #4294967295
 8003604:	3402      	adds	r4, #2
 8003606:	9305      	str	r3, [sp, #20]
 8003608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80036d0 <_svfiprintf_r+0x1f8>
 800360c:	7821      	ldrb	r1, [r4, #0]
 800360e:	2203      	movs	r2, #3
 8003610:	4650      	mov	r0, sl
 8003612:	f7fc fded 	bl	80001f0 <memchr>
 8003616:	b138      	cbz	r0, 8003628 <_svfiprintf_r+0x150>
 8003618:	9b04      	ldr	r3, [sp, #16]
 800361a:	eba0 000a 	sub.w	r0, r0, sl
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	4082      	lsls	r2, r0
 8003622:	4313      	orrs	r3, r2
 8003624:	3401      	adds	r4, #1
 8003626:	9304      	str	r3, [sp, #16]
 8003628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362c:	4825      	ldr	r0, [pc, #148]	; (80036c4 <_svfiprintf_r+0x1ec>)
 800362e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003632:	2206      	movs	r2, #6
 8003634:	f7fc fddc 	bl	80001f0 <memchr>
 8003638:	2800      	cmp	r0, #0
 800363a:	d038      	beq.n	80036ae <_svfiprintf_r+0x1d6>
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <_svfiprintf_r+0x1f0>)
 800363e:	bb1b      	cbnz	r3, 8003688 <_svfiprintf_r+0x1b0>
 8003640:	9b03      	ldr	r3, [sp, #12]
 8003642:	3307      	adds	r3, #7
 8003644:	f023 0307 	bic.w	r3, r3, #7
 8003648:	3308      	adds	r3, #8
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800364e:	4433      	add	r3, r6
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
 8003652:	e768      	b.n	8003526 <_svfiprintf_r+0x4e>
 8003654:	fb0c 3202 	mla	r2, ip, r2, r3
 8003658:	460c      	mov	r4, r1
 800365a:	2001      	movs	r0, #1
 800365c:	e7a6      	b.n	80035ac <_svfiprintf_r+0xd4>
 800365e:	2300      	movs	r3, #0
 8003660:	3401      	adds	r4, #1
 8003662:	9305      	str	r3, [sp, #20]
 8003664:	4619      	mov	r1, r3
 8003666:	f04f 0c0a 	mov.w	ip, #10
 800366a:	4620      	mov	r0, r4
 800366c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003670:	3a30      	subs	r2, #48	; 0x30
 8003672:	2a09      	cmp	r2, #9
 8003674:	d903      	bls.n	800367e <_svfiprintf_r+0x1a6>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0c6      	beq.n	8003608 <_svfiprintf_r+0x130>
 800367a:	9105      	str	r1, [sp, #20]
 800367c:	e7c4      	b.n	8003608 <_svfiprintf_r+0x130>
 800367e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003682:	4604      	mov	r4, r0
 8003684:	2301      	movs	r3, #1
 8003686:	e7f0      	b.n	800366a <_svfiprintf_r+0x192>
 8003688:	ab03      	add	r3, sp, #12
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	462a      	mov	r2, r5
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <_svfiprintf_r+0x1f4>)
 8003690:	a904      	add	r1, sp, #16
 8003692:	4638      	mov	r0, r7
 8003694:	f3af 8000 	nop.w
 8003698:	1c42      	adds	r2, r0, #1
 800369a:	4606      	mov	r6, r0
 800369c:	d1d6      	bne.n	800364c <_svfiprintf_r+0x174>
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	065b      	lsls	r3, r3, #25
 80036a2:	f53f af2d 	bmi.w	8003500 <_svfiprintf_r+0x28>
 80036a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a8:	b01d      	add	sp, #116	; 0x74
 80036aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ae:	ab03      	add	r3, sp, #12
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	462a      	mov	r2, r5
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <_svfiprintf_r+0x1f4>)
 80036b6:	a904      	add	r1, sp, #16
 80036b8:	4638      	mov	r0, r7
 80036ba:	f000 f879 	bl	80037b0 <_printf_i>
 80036be:	e7eb      	b.n	8003698 <_svfiprintf_r+0x1c0>
 80036c0:	0800487c 	.word	0x0800487c
 80036c4:	08004886 	.word	0x08004886
 80036c8:	00000000 	.word	0x00000000
 80036cc:	08003425 	.word	0x08003425
 80036d0:	08004882 	.word	0x08004882

080036d4 <_printf_common>:
 80036d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d8:	4616      	mov	r6, r2
 80036da:	4699      	mov	r9, r3
 80036dc:	688a      	ldr	r2, [r1, #8]
 80036de:	690b      	ldr	r3, [r1, #16]
 80036e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bfb8      	it	lt
 80036e8:	4613      	movlt	r3, r2
 80036ea:	6033      	str	r3, [r6, #0]
 80036ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036f0:	4607      	mov	r7, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	b10a      	cbz	r2, 80036fa <_printf_common+0x26>
 80036f6:	3301      	adds	r3, #1
 80036f8:	6033      	str	r3, [r6, #0]
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	0699      	lsls	r1, r3, #26
 80036fe:	bf42      	ittt	mi
 8003700:	6833      	ldrmi	r3, [r6, #0]
 8003702:	3302      	addmi	r3, #2
 8003704:	6033      	strmi	r3, [r6, #0]
 8003706:	6825      	ldr	r5, [r4, #0]
 8003708:	f015 0506 	ands.w	r5, r5, #6
 800370c:	d106      	bne.n	800371c <_printf_common+0x48>
 800370e:	f104 0a19 	add.w	sl, r4, #25
 8003712:	68e3      	ldr	r3, [r4, #12]
 8003714:	6832      	ldr	r2, [r6, #0]
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	42ab      	cmp	r3, r5
 800371a:	dc26      	bgt.n	800376a <_printf_common+0x96>
 800371c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003720:	1e13      	subs	r3, r2, #0
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	bf18      	it	ne
 8003726:	2301      	movne	r3, #1
 8003728:	0692      	lsls	r2, r2, #26
 800372a:	d42b      	bmi.n	8003784 <_printf_common+0xb0>
 800372c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003730:	4649      	mov	r1, r9
 8003732:	4638      	mov	r0, r7
 8003734:	47c0      	blx	r8
 8003736:	3001      	adds	r0, #1
 8003738:	d01e      	beq.n	8003778 <_printf_common+0xa4>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	6922      	ldr	r2, [r4, #16]
 800373e:	f003 0306 	and.w	r3, r3, #6
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf02      	ittt	eq
 8003746:	68e5      	ldreq	r5, [r4, #12]
 8003748:	6833      	ldreq	r3, [r6, #0]
 800374a:	1aed      	subeq	r5, r5, r3
 800374c:	68a3      	ldr	r3, [r4, #8]
 800374e:	bf0c      	ite	eq
 8003750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003754:	2500      	movne	r5, #0
 8003756:	4293      	cmp	r3, r2
 8003758:	bfc4      	itt	gt
 800375a:	1a9b      	subgt	r3, r3, r2
 800375c:	18ed      	addgt	r5, r5, r3
 800375e:	2600      	movs	r6, #0
 8003760:	341a      	adds	r4, #26
 8003762:	42b5      	cmp	r5, r6
 8003764:	d11a      	bne.n	800379c <_printf_common+0xc8>
 8003766:	2000      	movs	r0, #0
 8003768:	e008      	b.n	800377c <_printf_common+0xa8>
 800376a:	2301      	movs	r3, #1
 800376c:	4652      	mov	r2, sl
 800376e:	4649      	mov	r1, r9
 8003770:	4638      	mov	r0, r7
 8003772:	47c0      	blx	r8
 8003774:	3001      	adds	r0, #1
 8003776:	d103      	bne.n	8003780 <_printf_common+0xac>
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003780:	3501      	adds	r5, #1
 8003782:	e7c6      	b.n	8003712 <_printf_common+0x3e>
 8003784:	18e1      	adds	r1, r4, r3
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	2030      	movs	r0, #48	; 0x30
 800378a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800378e:	4422      	add	r2, r4
 8003790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003798:	3302      	adds	r3, #2
 800379a:	e7c7      	b.n	800372c <_printf_common+0x58>
 800379c:	2301      	movs	r3, #1
 800379e:	4622      	mov	r2, r4
 80037a0:	4649      	mov	r1, r9
 80037a2:	4638      	mov	r0, r7
 80037a4:	47c0      	blx	r8
 80037a6:	3001      	adds	r0, #1
 80037a8:	d0e6      	beq.n	8003778 <_printf_common+0xa4>
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7d9      	b.n	8003762 <_printf_common+0x8e>
	...

080037b0 <_printf_i>:
 80037b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	7e0f      	ldrb	r7, [r1, #24]
 80037b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037b8:	2f78      	cmp	r7, #120	; 0x78
 80037ba:	4691      	mov	r9, r2
 80037bc:	4680      	mov	r8, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	469a      	mov	sl, r3
 80037c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037c6:	d807      	bhi.n	80037d8 <_printf_i+0x28>
 80037c8:	2f62      	cmp	r7, #98	; 0x62
 80037ca:	d80a      	bhi.n	80037e2 <_printf_i+0x32>
 80037cc:	2f00      	cmp	r7, #0
 80037ce:	f000 80d4 	beq.w	800397a <_printf_i+0x1ca>
 80037d2:	2f58      	cmp	r7, #88	; 0x58
 80037d4:	f000 80c0 	beq.w	8003958 <_printf_i+0x1a8>
 80037d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037e0:	e03a      	b.n	8003858 <_printf_i+0xa8>
 80037e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037e6:	2b15      	cmp	r3, #21
 80037e8:	d8f6      	bhi.n	80037d8 <_printf_i+0x28>
 80037ea:	a101      	add	r1, pc, #4	; (adr r1, 80037f0 <_printf_i+0x40>)
 80037ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f0:	08003849 	.word	0x08003849
 80037f4:	0800385d 	.word	0x0800385d
 80037f8:	080037d9 	.word	0x080037d9
 80037fc:	080037d9 	.word	0x080037d9
 8003800:	080037d9 	.word	0x080037d9
 8003804:	080037d9 	.word	0x080037d9
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080037d9 	.word	0x080037d9
 8003810:	080037d9 	.word	0x080037d9
 8003814:	080037d9 	.word	0x080037d9
 8003818:	080037d9 	.word	0x080037d9
 800381c:	08003961 	.word	0x08003961
 8003820:	08003889 	.word	0x08003889
 8003824:	0800391b 	.word	0x0800391b
 8003828:	080037d9 	.word	0x080037d9
 800382c:	080037d9 	.word	0x080037d9
 8003830:	08003983 	.word	0x08003983
 8003834:	080037d9 	.word	0x080037d9
 8003838:	08003889 	.word	0x08003889
 800383c:	080037d9 	.word	0x080037d9
 8003840:	080037d9 	.word	0x080037d9
 8003844:	08003923 	.word	0x08003923
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	602a      	str	r2, [r5, #0]
 8003850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003858:	2301      	movs	r3, #1
 800385a:	e09f      	b.n	800399c <_printf_i+0x1ec>
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	682b      	ldr	r3, [r5, #0]
 8003860:	0607      	lsls	r7, r0, #24
 8003862:	f103 0104 	add.w	r1, r3, #4
 8003866:	6029      	str	r1, [r5, #0]
 8003868:	d501      	bpl.n	800386e <_printf_i+0xbe>
 800386a:	681e      	ldr	r6, [r3, #0]
 800386c:	e003      	b.n	8003876 <_printf_i+0xc6>
 800386e:	0646      	lsls	r6, r0, #25
 8003870:	d5fb      	bpl.n	800386a <_printf_i+0xba>
 8003872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003876:	2e00      	cmp	r6, #0
 8003878:	da03      	bge.n	8003882 <_printf_i+0xd2>
 800387a:	232d      	movs	r3, #45	; 0x2d
 800387c:	4276      	negs	r6, r6
 800387e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003882:	485a      	ldr	r0, [pc, #360]	; (80039ec <_printf_i+0x23c>)
 8003884:	230a      	movs	r3, #10
 8003886:	e012      	b.n	80038ae <_printf_i+0xfe>
 8003888:	682b      	ldr	r3, [r5, #0]
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	1d19      	adds	r1, r3, #4
 800388e:	6029      	str	r1, [r5, #0]
 8003890:	0605      	lsls	r5, r0, #24
 8003892:	d501      	bpl.n	8003898 <_printf_i+0xe8>
 8003894:	681e      	ldr	r6, [r3, #0]
 8003896:	e002      	b.n	800389e <_printf_i+0xee>
 8003898:	0641      	lsls	r1, r0, #25
 800389a:	d5fb      	bpl.n	8003894 <_printf_i+0xe4>
 800389c:	881e      	ldrh	r6, [r3, #0]
 800389e:	4853      	ldr	r0, [pc, #332]	; (80039ec <_printf_i+0x23c>)
 80038a0:	2f6f      	cmp	r7, #111	; 0x6f
 80038a2:	bf0c      	ite	eq
 80038a4:	2308      	moveq	r3, #8
 80038a6:	230a      	movne	r3, #10
 80038a8:	2100      	movs	r1, #0
 80038aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038ae:	6865      	ldr	r5, [r4, #4]
 80038b0:	60a5      	str	r5, [r4, #8]
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	bfa2      	ittt	ge
 80038b6:	6821      	ldrge	r1, [r4, #0]
 80038b8:	f021 0104 	bicge.w	r1, r1, #4
 80038bc:	6021      	strge	r1, [r4, #0]
 80038be:	b90e      	cbnz	r6, 80038c4 <_printf_i+0x114>
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	d04b      	beq.n	800395c <_printf_i+0x1ac>
 80038c4:	4615      	mov	r5, r2
 80038c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80038ca:	fb03 6711 	mls	r7, r3, r1, r6
 80038ce:	5dc7      	ldrb	r7, [r0, r7]
 80038d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038d4:	4637      	mov	r7, r6
 80038d6:	42bb      	cmp	r3, r7
 80038d8:	460e      	mov	r6, r1
 80038da:	d9f4      	bls.n	80038c6 <_printf_i+0x116>
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d10b      	bne.n	80038f8 <_printf_i+0x148>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	07de      	lsls	r6, r3, #31
 80038e4:	d508      	bpl.n	80038f8 <_printf_i+0x148>
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	6861      	ldr	r1, [r4, #4]
 80038ea:	4299      	cmp	r1, r3
 80038ec:	bfde      	ittt	le
 80038ee:	2330      	movle	r3, #48	; 0x30
 80038f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038f8:	1b52      	subs	r2, r2, r5
 80038fa:	6122      	str	r2, [r4, #16]
 80038fc:	f8cd a000 	str.w	sl, [sp]
 8003900:	464b      	mov	r3, r9
 8003902:	aa03      	add	r2, sp, #12
 8003904:	4621      	mov	r1, r4
 8003906:	4640      	mov	r0, r8
 8003908:	f7ff fee4 	bl	80036d4 <_printf_common>
 800390c:	3001      	adds	r0, #1
 800390e:	d14a      	bne.n	80039a6 <_printf_i+0x1f6>
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	b004      	add	sp, #16
 8003916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	f043 0320 	orr.w	r3, r3, #32
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	4833      	ldr	r0, [pc, #204]	; (80039f0 <_printf_i+0x240>)
 8003924:	2778      	movs	r7, #120	; 0x78
 8003926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	6829      	ldr	r1, [r5, #0]
 800392e:	061f      	lsls	r7, r3, #24
 8003930:	f851 6b04 	ldr.w	r6, [r1], #4
 8003934:	d402      	bmi.n	800393c <_printf_i+0x18c>
 8003936:	065f      	lsls	r7, r3, #25
 8003938:	bf48      	it	mi
 800393a:	b2b6      	uxthmi	r6, r6
 800393c:	07df      	lsls	r7, r3, #31
 800393e:	bf48      	it	mi
 8003940:	f043 0320 	orrmi.w	r3, r3, #32
 8003944:	6029      	str	r1, [r5, #0]
 8003946:	bf48      	it	mi
 8003948:	6023      	strmi	r3, [r4, #0]
 800394a:	b91e      	cbnz	r6, 8003954 <_printf_i+0x1a4>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f023 0320 	bic.w	r3, r3, #32
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	2310      	movs	r3, #16
 8003956:	e7a7      	b.n	80038a8 <_printf_i+0xf8>
 8003958:	4824      	ldr	r0, [pc, #144]	; (80039ec <_printf_i+0x23c>)
 800395a:	e7e4      	b.n	8003926 <_printf_i+0x176>
 800395c:	4615      	mov	r5, r2
 800395e:	e7bd      	b.n	80038dc <_printf_i+0x12c>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	6826      	ldr	r6, [r4, #0]
 8003964:	6961      	ldr	r1, [r4, #20]
 8003966:	1d18      	adds	r0, r3, #4
 8003968:	6028      	str	r0, [r5, #0]
 800396a:	0635      	lsls	r5, r6, #24
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	d501      	bpl.n	8003974 <_printf_i+0x1c4>
 8003970:	6019      	str	r1, [r3, #0]
 8003972:	e002      	b.n	800397a <_printf_i+0x1ca>
 8003974:	0670      	lsls	r0, r6, #25
 8003976:	d5fb      	bpl.n	8003970 <_printf_i+0x1c0>
 8003978:	8019      	strh	r1, [r3, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	4615      	mov	r5, r2
 8003980:	e7bc      	b.n	80038fc <_printf_i+0x14c>
 8003982:	682b      	ldr	r3, [r5, #0]
 8003984:	1d1a      	adds	r2, r3, #4
 8003986:	602a      	str	r2, [r5, #0]
 8003988:	681d      	ldr	r5, [r3, #0]
 800398a:	6862      	ldr	r2, [r4, #4]
 800398c:	2100      	movs	r1, #0
 800398e:	4628      	mov	r0, r5
 8003990:	f7fc fc2e 	bl	80001f0 <memchr>
 8003994:	b108      	cbz	r0, 800399a <_printf_i+0x1ea>
 8003996:	1b40      	subs	r0, r0, r5
 8003998:	6060      	str	r0, [r4, #4]
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	6123      	str	r3, [r4, #16]
 800399e:	2300      	movs	r3, #0
 80039a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a4:	e7aa      	b.n	80038fc <_printf_i+0x14c>
 80039a6:	6923      	ldr	r3, [r4, #16]
 80039a8:	462a      	mov	r2, r5
 80039aa:	4649      	mov	r1, r9
 80039ac:	4640      	mov	r0, r8
 80039ae:	47d0      	blx	sl
 80039b0:	3001      	adds	r0, #1
 80039b2:	d0ad      	beq.n	8003910 <_printf_i+0x160>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	079b      	lsls	r3, r3, #30
 80039b8:	d413      	bmi.n	80039e2 <_printf_i+0x232>
 80039ba:	68e0      	ldr	r0, [r4, #12]
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	4298      	cmp	r0, r3
 80039c0:	bfb8      	it	lt
 80039c2:	4618      	movlt	r0, r3
 80039c4:	e7a6      	b.n	8003914 <_printf_i+0x164>
 80039c6:	2301      	movs	r3, #1
 80039c8:	4632      	mov	r2, r6
 80039ca:	4649      	mov	r1, r9
 80039cc:	4640      	mov	r0, r8
 80039ce:	47d0      	blx	sl
 80039d0:	3001      	adds	r0, #1
 80039d2:	d09d      	beq.n	8003910 <_printf_i+0x160>
 80039d4:	3501      	adds	r5, #1
 80039d6:	68e3      	ldr	r3, [r4, #12]
 80039d8:	9903      	ldr	r1, [sp, #12]
 80039da:	1a5b      	subs	r3, r3, r1
 80039dc:	42ab      	cmp	r3, r5
 80039de:	dcf2      	bgt.n	80039c6 <_printf_i+0x216>
 80039e0:	e7eb      	b.n	80039ba <_printf_i+0x20a>
 80039e2:	2500      	movs	r5, #0
 80039e4:	f104 0619 	add.w	r6, r4, #25
 80039e8:	e7f5      	b.n	80039d6 <_printf_i+0x226>
 80039ea:	bf00      	nop
 80039ec:	0800488d 	.word	0x0800488d
 80039f0:	0800489e 	.word	0x0800489e

080039f4 <memmove>:
 80039f4:	4288      	cmp	r0, r1
 80039f6:	b510      	push	{r4, lr}
 80039f8:	eb01 0402 	add.w	r4, r1, r2
 80039fc:	d902      	bls.n	8003a04 <memmove+0x10>
 80039fe:	4284      	cmp	r4, r0
 8003a00:	4623      	mov	r3, r4
 8003a02:	d807      	bhi.n	8003a14 <memmove+0x20>
 8003a04:	1e43      	subs	r3, r0, #1
 8003a06:	42a1      	cmp	r1, r4
 8003a08:	d008      	beq.n	8003a1c <memmove+0x28>
 8003a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a12:	e7f8      	b.n	8003a06 <memmove+0x12>
 8003a14:	4402      	add	r2, r0
 8003a16:	4601      	mov	r1, r0
 8003a18:	428a      	cmp	r2, r1
 8003a1a:	d100      	bne.n	8003a1e <memmove+0x2a>
 8003a1c:	bd10      	pop	{r4, pc}
 8003a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a26:	e7f7      	b.n	8003a18 <memmove+0x24>

08003a28 <_sbrk_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4d06      	ldr	r5, [pc, #24]	; (8003a44 <_sbrk_r+0x1c>)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	f7fd fa54 	bl	8000ee0 <_sbrk>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_sbrk_r+0x1a>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_sbrk_r+0x1a>
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	20000668 	.word	0x20000668

08003a48 <memcpy>:
 8003a48:	440a      	add	r2, r1
 8003a4a:	4291      	cmp	r1, r2
 8003a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a50:	d100      	bne.n	8003a54 <memcpy+0xc>
 8003a52:	4770      	bx	lr
 8003a54:	b510      	push	{r4, lr}
 8003a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a5e:	4291      	cmp	r1, r2
 8003a60:	d1f9      	bne.n	8003a56 <memcpy+0xe>
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <_realloc_r>:
 8003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a68:	4680      	mov	r8, r0
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	460e      	mov	r6, r1
 8003a6e:	b921      	cbnz	r1, 8003a7a <_realloc_r+0x16>
 8003a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a74:	4611      	mov	r1, r2
 8003a76:	f7ff bc49 	b.w	800330c <_malloc_r>
 8003a7a:	b92a      	cbnz	r2, 8003a88 <_realloc_r+0x24>
 8003a7c:	f7ff fbda 	bl	8003234 <_free_r>
 8003a80:	4625      	mov	r5, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a88:	f000 f81b 	bl	8003ac2 <_malloc_usable_size_r>
 8003a8c:	4284      	cmp	r4, r0
 8003a8e:	4607      	mov	r7, r0
 8003a90:	d802      	bhi.n	8003a98 <_realloc_r+0x34>
 8003a92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a96:	d812      	bhi.n	8003abe <_realloc_r+0x5a>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	f7ff fc36 	bl	800330c <_malloc_r>
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0ed      	beq.n	8003a82 <_realloc_r+0x1e>
 8003aa6:	42bc      	cmp	r4, r7
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4631      	mov	r1, r6
 8003aac:	bf28      	it	cs
 8003aae:	463a      	movcs	r2, r7
 8003ab0:	f7ff ffca 	bl	8003a48 <memcpy>
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	f7ff fbbc 	bl	8003234 <_free_r>
 8003abc:	e7e1      	b.n	8003a82 <_realloc_r+0x1e>
 8003abe:	4635      	mov	r5, r6
 8003ac0:	e7df      	b.n	8003a82 <_realloc_r+0x1e>

08003ac2 <_malloc_usable_size_r>:
 8003ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac6:	1f18      	subs	r0, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfbc      	itt	lt
 8003acc:	580b      	ldrlt	r3, [r1, r0]
 8003ace:	18c0      	addlt	r0, r0, r3
 8003ad0:	4770      	bx	lr
	...

08003ad4 <_init>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr

08003ae0 <_fini>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr
